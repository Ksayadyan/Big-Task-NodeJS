const cryptPassword = require('./cryptPassword.js');
const fs = require("fs")
const {
  URL
} = require('url');
const mongod = require("./mongo.js")
const ClassUser = require('./classUserDb.js')

module.exports.signup = async (req, res) => {
  let value = req.body;
  let password = cryptPassword(value.password);
  try {
    db.sync()
    //Creating user row in mysql database
    await Users.create({
      name: value.firstName,
      lastname: value.lastName,
      login: value.login,
      password: password,
      gender: value.gender,
      birthday: value.birthday,
      question: value.question,
      answer: value.answer,
      mail: value.email,
      phone: value.phone,
    })
    res.send("OK");
    let sql = `SELECT id FROM users WHERE login = '${value.login}'`;
    //getting users id generated by mysql
    let user = await db.query(sql, {
      type: db.QueryTypes.SELECT,
    })
    //creating folder for user images
    fs.mkdir(`./user-images/Client${user[0]['id']}/`, (err) => {
      if (err) throw err;
      console.log("Folder created");
    })

    //Creating mongodb user object and sending to database
    if (value.gender === 'male') {
      let obj = new ClassUser(`${user[0]['id']}`, '../defaultImages/male.jpg')
      await mongod.mongo(obj);
    } else {
      let obj = new ClassUser(`${user[0]['id']}`, '../defaultImages/female.jpg')
      await mongod.mongo(obj);
    }

    console.log("Succesfully registered")
  } catch (e) {
    console.log(`User with login "${value.login}" already exists`);
    console.log(e);
    res.send("Duplicate")
  }
}


module.exports.login = async (req, res) => {
  try {
    console.log('signin requrest');
    let message = '';
    if (req.method === 'POST') {
      let post = req.body;
      let login = post.login;
      let password = cryptPassword(post.password);
      let sql = `SELECT * FROM users WHERE login='${login}' and password='${password}'`;
      let user = await db.query(sql, {
        type: db.QueryTypes.SELECT
      });
      //Generate user id
      if (user.length) {
        req.session.userId = user[0]['id'];
        console.log('User id is', user[0]['id']);
        res.redirect('/home');
      } else {
        console.log('User is not found');
        res.send({
          Access: "Denied",
        })
      }
    }
  } catch (e) {
    console.log(e);
  }
}

//Profile Information sending
module.exports.profile = async (req, res) => {
  try {
    let userId = req.session.userId;
    if (!userId) {
      res.redirect('/login');
      return;
    }
    let sql = `SELECT * FROM users WHERE id='${userId}'`;
    let user = await db.query(sql, {
      type: db.QueryTypes.SELECT
    });
    console.log('User found');
    let obj = {
      name: user[0]['name'],
      lastname: user[0]['lastname']
    }
    //Find information about specific user in mongo database
    mongod.findAndSendUserInfo(userId, res, obj);
  } catch (e) {
    console.log('Error while redirecting');
  }
}

//Image upload handler
module.exports.imageUpload = (req, res) => {
  if (!req.session.userId) {
    console.log('Not authentificated');
    res.send('Not authentificated');
  } else {
    if (!req.files) {
      console.log('No files uploaded');
      res.send('No files');
    } else {
      let image = req.files.image;
      image.mv(`./user-images/Client${req.session.userId}/${req.files.image.name}`, (err) => {
        if (err) {
          res.send('Internal error')
          return;
        }
        res.send('File uploaded')
        mongod.updateImages(req.session.userId, `../../../user-images/Client${req.session.userId}/${req.files.image.name}`)
      })
    }
  }
}

//Signing out specific user
module.exports.signout = async (req, res) => {
  if (req.session.userId) {
    req.session.destroy();
    res.send('Logged out');
  } else {
    res.send('Not Authorized')
  }
}

//Saving fetched url in MongoDB
module.exports.fetchurl = async (req, res) => {
  try {
    if (req.session.userId) {
      const fetchedUrl = new URL(req.body.url);
      const hostname = fetchedUrl.hostname;
      await mongod.saveFetchedUrl(req.session.userId, req.body.url, hostname);
      res.send('Url saved')

    } else {
      res.send('Not authorized')
    }
  } catch (e) {
    console.log('Error occured while trying to save fetched url');
    console.log(e);
  }
}

//Saveing fetched url's html in mogodb
module.exports.saveHtml = async (req, res) => {
  try {
    if (req.session.userId) {
      const fetchedUrl = new URL(req.body.url);
      const html = req.body.html;
      const hostname = fetchedUrl.hostname;
      await mongod.saveHtml(req.session.userId, hostname, req.body.url, html);
      res.send('OK');
    } else {
      res.send('Not authorized');
    }
  } catch (e) {
    console.log('Error occured while saving html', e);
    res.send('Error');
  }
}
